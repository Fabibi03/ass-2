use PerformanceManagementSystem
import pymongo

from bson.objectid import ObjectId



# Connect to MongoDB

client = pymongo.MongoClient("mongodb:NBVAF11:27017/")

db = client["performance_management"]

objectives_collection = db["department_objectives"]

employees_collection = db["employees"]

supervisors_collection = db["supervisors"]



# create department objectives

def create_objective(objective_data):

    objective_id = objectives_collection.insert_one(objective_data).inserted_id

    return str(objective_id)



#delete department objectives

def delete_objective(objective_id):

    objectives_collection.delete_one({"_id": ObjectId(objective_id)})



# view employees' total scores

def view_employees_total_scores():

   



# assign an employee to a supervisor

def assign_employee_to_supervisor(employee_id, supervisor_id):

    employees_collection.update_one(

        {"_id": ObjectId(employee_id)},

        {"$set": {"supervisor_id": ObjectId(supervisor_id)}}

    )



#  creating a department objective

objective_data = {

    "name": "Increase Department Productivity",

    "description": "Improve the overall productivity of the department",

    "weight": 30  

}

objective_id = create_objective(objective_data)

#EMPLOYEE

# creating KPIs for an employee

def create_kpi(employee_id, kpi_data):

    kpi_id = ObjectId()

    employees_collection.update_one(

        {"_id": ObjectId(employee_id)},

        {"$push": {"kpi": {"_id": kpi_id, "name": kpi_data["name"], "description": kpi_data["description"]}}

    )

    return str(kpi_id)



# grade the Supervisor

def grade_supervisor(employee_id, supervisor_grade):

    employees_collection.update_one(

        {"_id": ObjectId(employee_id)},

        {"$set": {"supervisor_grade": supervisor_grade}}

    )



# view an employee's scores

def view_employee_scores(employee_id):

    employee = employees_collection.find_one({"_id": ObjectId(employee_id)})

    employee_name = employee["name"]

    kpis = employee["kpi"]

    # Calculate and return the scores for the KPIs



# creating KPIs for an employee

employee_id = "employee_id_here"  # Replace with the actual employee's ID

kpi_data = {

    "name": "Productivity",

    "description": "Measure employee productivity"

}

kpi_id = create_kpi(employee_id, kpi_data)

#approve an employee's KPIs
def approve_kpis(employee_id, kpi_id):
    employees_collection.update_one(
        {"_id": ObjectId(employee_id), "kpi._id": ObjectId(kpi_id)},
        {"$set": {"kpi.$.approved": True}}
    )

# delete an employee's KPIs
def delete_kpis(employee_id, kpi_id):
    employees_collection.update_one(
        {"_id": ObjectId(employee_id)},
        {"$pull": {"kpi": {"_id": ObjectId(kpi_id)}}
    )

# update an employee's KPI
def update_kpi(employee_id, kpi_id, new_data):
    employees_collection.update_one(
        {"_id": ObjectId(employee_id), "kpi._id": ObjectId(kpi_id)},
        {"$set": {"kpi.$.name": new_data["name"], "kpi.$.description": new_data["description"]}}
    )

# view employee scores (only for employees assigned to the Supervisor)
def view_employee_scores(supervisor_id):
    employees = employees_collection.find({"supervisor_id": ObjectId(supervisor_id)})
    for employee in employees:
        employee_id = str(employee["_id"])
        employee_name = employee["name"]
        kpis = employee["kpi"]
        # Calculate scores for each KPI and employee here

# grade an employee's KPIs
def grade_kpi(employee_id, kpi_id, score):
    employees_collection.update_one(
        {"_id": ObjectId(employee_id), "kpi._id": ObjectId(kpi_id)},
        {"$set": {"kpi.$.score": score}}
    )
